from aiogram import Bot, Dispatcher, types, F
from handlers.payment import send_invoice_handler, pre_checkout_handler, success_payment_handler
import asyncio

TOKEN = '7596590431:AAEpLzcjwyar1hOqR1jGEnPY_ZA6YORzP-w'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
user_star_count = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def start_command_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("‚≠êÔ∏è–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏"),
        types.KeyboardButton("üí∏–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
    )
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚≠êÔ∏è–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏"
@dp.message(F.text == "‚≠êÔ∏è–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏")
async def donate_handler(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    user_star_count[message.from_user.id] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
@dp.message(lambda message: message.from_user.id in user_star_count and user_star_count[message.from_user.id] is None)
async def receive_star_count(message: types.Message):
    try:
        star_count = int(message.text)
        if star_count <= 0:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        user_star_count[message.from_user.id] = star_count
        await send_invoice_handler(message, star_count)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
dp.pre_checkout_query.register(pre_checkout_handler)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
dp.message.register(success_payment_handler, F.successful_payment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∏–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"
@dp.message(F.text == "üí∏–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É")
async def withdraw_handler(message: types.Message):
    await message.reply("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –û–∂–∏–¥–∞–π—Ç–µ.")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
